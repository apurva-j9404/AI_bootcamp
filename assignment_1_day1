{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9464906,"sourceType":"datasetVersion","datasetId":5754921},{"sourceId":9469080,"sourceType":"datasetVersion","datasetId":5758063}],"dockerImageVersionId":30775,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd","metadata":{"execution":{"iopub.status.busy":"2024-09-24T09:39:15.311207Z","iopub.execute_input":"2024-09-24T09:39:15.311811Z","iopub.status.idle":"2024-09-24T09:39:15.316912Z","shell.execute_reply.started":"2024-09-24T09:39:15.311770Z","shell.execute_reply":"2024-09-24T09:39:15.315735Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df=pd.read_csv('/kaggle/input/students/Students.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-24T03:00:37.231496Z","iopub.execute_input":"2024-09-24T03:00:37.232693Z","iopub.status.idle":"2024-09-24T03:00:37.241610Z","shell.execute_reply.started":"2024-09-24T03:00:37.232645Z","shell.execute_reply":"2024-09-24T03:00:37.240435Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"print(df.head())","metadata":{"execution":{"iopub.status.busy":"2024-09-24T03:01:30.678944Z","iopub.execute_input":"2024-09-24T03:01:30.679367Z","iopub.status.idle":"2024-09-24T03:01:30.693478Z","shell.execute_reply.started":"2024-09-24T03:01:30.679329Z","shell.execute_reply":"2024-09-24T03:01:30.692337Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"   StudentID     Name  Gender  Age  MathScore  EnglishScore  TotalScore\n0          1    Alice  Female   15       85.0          90.0         175\n1          2      Bob    Male   16        NaN          95.0          95\n2          3  Charlie    Male   15       80.0           NaN          80\n3          4    Diana  Female   16       90.0          85.0         175\n4          5      Eve  Female   15       75.0          70.0         145\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler","metadata":{"execution":{"iopub.status.busy":"2024-09-24T03:04:43.481328Z","iopub.execute_input":"2024-09-24T03:04:43.481823Z","iopub.status.idle":"2024-09-24T03:04:44.288553Z","shell.execute_reply.started":"2024-09-24T03:04:43.481778Z","shell.execute_reply":"2024-09-24T03:04:44.287231Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"df['MathScore'].fillna(df['MathScore'].mean(),inplace=True)\ndf['EnglishScore'].fillna(df['EnglishScore'].mean(),inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T03:08:53.716593Z","iopub.execute_input":"2024-09-24T03:08:53.717614Z","iopub.status.idle":"2024-09-24T03:08:53.724617Z","shell.execute_reply.started":"2024-09-24T03:08:53.717566Z","shell.execute_reply":"2024-09-24T03:08:53.723407Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/285384460.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['MathScore'].fillna(df['MathScore'].mean(),inplace=True)\n/tmp/ipykernel_30/285384460.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['EnglishScore'].fillna(df['EnglishScore'].mean(),inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(df.head())","metadata":{"execution":{"iopub.status.busy":"2024-09-24T03:16:00.922016Z","iopub.execute_input":"2024-09-24T03:16:00.922492Z","iopub.status.idle":"2024-09-24T03:16:00.932896Z","shell.execute_reply.started":"2024-09-24T03:16:00.922429Z","shell.execute_reply":"2024-09-24T03:16:00.931432Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"   StudentID     Name  Gender  Age  MathScore  EnglishScore  TotalScore\n0          1    Alice       0   15       85.0          90.0         175\n1          2      Bob       1   16       82.5          95.0          95\n2          3  Charlie       1   15       80.0          85.0          80\n3          4    Diana       0   16       90.0          85.0         175\n4          5      Eve       0   15       75.0          70.0         145\n","output_type":"stream"}]},{"cell_type":"code","source":"# Initialize the LabelEncoder\nle = LabelEncoder()\n\n# Encode the Gender column\ndf['Gender'] = le.fit_transform(df['Gender'])\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T03:15:46.993522Z","iopub.execute_input":"2024-09-24T03:15:46.993993Z","iopub.status.idle":"2024-09-24T03:15:47.000696Z","shell.execute_reply.started":"2024-09-24T03:15:46.993951Z","shell.execute_reply":"2024-09-24T03:15:46.999485Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# Correct the TotalScore column\ndf['TotalScore'] = df['MathScore'] + df['EnglishScore']\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T03:16:41.553479Z","iopub.execute_input":"2024-09-24T03:16:41.554698Z","iopub.status.idle":"2024-09-24T03:16:41.560640Z","shell.execute_reply.started":"2024-09-24T03:16:41.554646Z","shell.execute_reply":"2024-09-24T03:16:41.559238Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# Initialize the StandardScaler\nscaler = StandardScaler()\n\n# Standardize the columns\ndf[['MathScore', 'EnglishScore', 'TotalScore']] = scaler.fit_transform(df[['MathScore', 'EnglishScore', 'TotalScore']])\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T03:17:59.473300Z","iopub.execute_input":"2024-09-24T03:17:59.473759Z","iopub.status.idle":"2024-09-24T03:17:59.494565Z","shell.execute_reply.started":"2024-09-24T03:17:59.473722Z","shell.execute_reply":"2024-09-24T03:17:59.493293Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# Save the cleaned dataset\ndf.to_csv('students_cleaned_dataset.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T03:18:50.280330Z","iopub.execute_input":"2024-09-24T03:18:50.280785Z","iopub.status.idle":"2024-09-24T03:18:50.292817Z","shell.execute_reply.started":"2024-09-24T03:18:50.280742Z","shell.execute_reply":"2024-09-24T03:18:50.291459Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"df2=pd.read_csv('/kaggle/input/sales/Sales.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-24T09:39:23.946403Z","iopub.execute_input":"2024-09-24T09:39:23.946886Z","iopub.status.idle":"2024-09-24T09:39:23.954980Z","shell.execute_reply.started":"2024-09-24T09:39:23.946841Z","shell.execute_reply":"2024-09-24T09:39:23.953741Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"print(df2.head())\ndf2['Revenue_n']=df2['Price']*df2['QuantitySold']","metadata":{"execution":{"iopub.status.busy":"2024-09-24T09:46:11.603476Z","iopub.execute_input":"2024-09-24T09:46:11.604446Z","iopub.status.idle":"2024-09-24T09:46:11.612922Z","shell.execute_reply.started":"2024-09-24T09:46:11.604405Z","shell.execute_reply":"2024-09-24T09:46:11.611781Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"   ProductID ProductCategory  Price  QuantitySold  Revenue  Revenue_n\n0        101     Electronics   1500             5     7500       7500\n1        102     Electronics   2000             3     6000       6000\n2        103       Furniture    500            10     5000       5000\n3        104        Clothing     50           100     5000       5000\n4        105     Electronics  10000             1    10000      10000\n","output_type":"stream"}]},{"cell_type":"code","source":"from scipy import stats\n\n# Calculate Z-scores\ndf2['Z_score'] = stats.zscore(df2['Price'])\n\n# Define a threshold for Z-score\nthreshold = 3\n\n# Remove outliers\ndf2 = df2[df2['Z_score'].abs() < threshold]\n\n# Drop the Z_score column as it's no longer needed\ndf2 = df2.drop(columns=['Z_score'])\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T09:49:13.162907Z","iopub.execute_input":"2024-09-24T09:49:13.163339Z","iopub.status.idle":"2024-09-24T09:49:13.180913Z","shell.execute_reply.started":"2024-09-24T09:49:13.163300Z","shell.execute_reply":"2024-09-24T09:49:13.179494Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler\n\n# Initialize the MinMaxScaler\nscaler = MinMaxScaler()\n\n# Normalize Price and Revenue\ndf2[['Price', 'Revenue']] = scaler.fit_transform(df2[['Price', 'Revenue']])\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T09:52:08.441264Z","iopub.execute_input":"2024-09-24T09:52:08.442306Z","iopub.status.idle":"2024-09-24T09:52:08.453086Z","shell.execute_reply.started":"2024-09-24T09:52:08.442258Z","shell.execute_reply":"2024-09-24T09:52:08.451503Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"print(df2.head())","metadata":{"execution":{"iopub.status.busy":"2024-09-24T09:52:40.020410Z","iopub.execute_input":"2024-09-24T09:52:40.021632Z","iopub.status.idle":"2024-09-24T09:52:40.032117Z","shell.execute_reply.started":"2024-09-24T09:52:40.021551Z","shell.execute_reply":"2024-09-24T09:52:40.030661Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"   ProductID ProductCategory     Price  QuantitySold   Revenue  Revenue_n\n0        101     Electronics  0.148297             5  0.583333       7500\n1        102     Electronics  0.198397             3  0.333333       6000\n2        103       Furniture  0.048096            10  0.166667       5000\n3        104        Clothing  0.003006           100  0.166667       5000\n4        105     Electronics  1.000000             1  1.000000      10000\n","output_type":"stream"}]},{"cell_type":"code","source":"# Save the updated dataset to a new CSV file\ndf2.to_csv('sales_cleaned.csv', index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T09:54:20.003758Z","iopub.execute_input":"2024-09-24T09:54:20.004837Z","iopub.status.idle":"2024-09-24T09:54:20.013759Z","shell.execute_reply.started":"2024-09-24T09:54:20.004791Z","shell.execute_reply":"2024-09-24T09:54:20.012587Z"},"trusted":true},"execution_count":15,"outputs":[]}]}